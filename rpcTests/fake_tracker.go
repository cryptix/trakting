// This file was generated by counterfeiter
package rpcTests

import (
	"sync"

	"github.com/cryptix/trakting/types"
)

type FakeTracker struct {
	AddStub        func(types.Track) error
	addMutex       sync.RWMutex
	addArgsForCall []struct {
		arg1 types.Track
	}
	addReturns struct {
		result1 error
	}
	GetStub        func(id string) (types.Track, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		id string
	}
	getReturns struct {
		result1 types.Track
		result2 error
	}
	AllStub        func() ([]types.Track, error)
	allMutex       sync.RWMutex
	allArgsForCall []struct{}
	allReturns     struct {
		result1 []types.Track
		result2 error
	}
	ByUserNameStub        func(name string) ([]types.Track, error)
	byUserNameMutex       sync.RWMutex
	byUserNameArgsForCall []struct {
		name string
	}
	byUserNameReturns struct {
		result1 []types.Track
		result2 error
	}
}

func (fake *FakeTracker) Add(arg1 types.Track) error {
	fake.addMutex.Lock()
	fake.addArgsForCall = append(fake.addArgsForCall, struct {
		arg1 types.Track
	}{arg1})
	fake.addMutex.Unlock()
	if fake.AddStub != nil {
		return fake.AddStub(arg1)
	} else {
		return fake.addReturns.result1
	}
}

func (fake *FakeTracker) AddCallCount() int {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	return len(fake.addArgsForCall)
}

func (fake *FakeTracker) AddArgsForCall(i int) types.Track {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	return fake.addArgsForCall[i].arg1
}

func (fake *FakeTracker) AddReturns(result1 error) {
	fake.AddStub = nil
	fake.addReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeTracker) Get(id string) (types.Track, error) {
	fake.getMutex.Lock()
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		id string
	}{id})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub(id)
	} else {
		return fake.getReturns.result1, fake.getReturns.result2
	}
}

func (fake *FakeTracker) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeTracker) GetArgsForCall(i int) string {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return fake.getArgsForCall[i].id
}

func (fake *FakeTracker) GetReturns(result1 types.Track, result2 error) {
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 types.Track
		result2 error
	}{result1, result2}
}

func (fake *FakeTracker) All() ([]types.Track, error) {
	fake.allMutex.Lock()
	fake.allArgsForCall = append(fake.allArgsForCall, struct{}{})
	fake.allMutex.Unlock()
	if fake.AllStub != nil {
		return fake.AllStub()
	} else {
		return fake.allReturns.result1, fake.allReturns.result2
	}
}

func (fake *FakeTracker) AllCallCount() int {
	fake.allMutex.RLock()
	defer fake.allMutex.RUnlock()
	return len(fake.allArgsForCall)
}

func (fake *FakeTracker) AllReturns(result1 []types.Track, result2 error) {
	fake.AllStub = nil
	fake.allReturns = struct {
		result1 []types.Track
		result2 error
	}{result1, result2}
}

func (fake *FakeTracker) ByUserName(name string) ([]types.Track, error) {
	fake.byUserNameMutex.Lock()
	fake.byUserNameArgsForCall = append(fake.byUserNameArgsForCall, struct {
		name string
	}{name})
	fake.byUserNameMutex.Unlock()
	if fake.ByUserNameStub != nil {
		return fake.ByUserNameStub(name)
	} else {
		return fake.byUserNameReturns.result1, fake.byUserNameReturns.result2
	}
}

func (fake *FakeTracker) ByUserNameCallCount() int {
	fake.byUserNameMutex.RLock()
	defer fake.byUserNameMutex.RUnlock()
	return len(fake.byUserNameArgsForCall)
}

func (fake *FakeTracker) ByUserNameArgsForCall(i int) string {
	fake.byUserNameMutex.RLock()
	defer fake.byUserNameMutex.RUnlock()
	return fake.byUserNameArgsForCall[i].name
}

func (fake *FakeTracker) ByUserNameReturns(result1 []types.Track, result2 error) {
	fake.ByUserNameStub = nil
	fake.byUserNameReturns = struct {
		result1 []types.Track
		result2 error
	}{result1, result2}
}

var _ types.Tracker = new(FakeTracker)
